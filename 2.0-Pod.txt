Pod:
	- template:
		apiVersion: v1
		kind: Pod
		metadata:
			name: myapp-pod
			labels:
				app: myapp
				type: mypod-type
			annotations:							#optional
				buildversion: v1
		spec:
			containers:
			- name: mypod-container
			  image: xxx
			  env:
        		- name: MY_SECRET
          		  value: mysecretpassword
          	  command: ["command", "arg1", ...]
          	  args: ["arg1","arg2",....]
          	  ports:
          	  	- containerPort: 8080


          	restartPolicy: Always 					# default is Always => auto restart when containers dead

- labels & selectors used to group and select k8s object
	ex: 
		kubectl get pods --selector type=mypod-type
		=> Get pods with label "type:mypod-type"

- annotations are used to record other details for information purpose
	ex: tool's detail: name, version, build info, contact detail, phone number, email ... that maybe used for some kind of integration purpose


- volume mount to an empty dir:
	spec:
		containers:
		- name: mypod-container
		  image: xxx
    	  volumeMounts:
    	    - name: data
    	      mountPath: /path/to/mountpoint


 		#Inject all keys-values from configmap file
		    volumes:
		      - name: data
		        emptyDir: {}



- logs:
	kubectl logs -f my-pod-name
		=> view log stream from the pod

	kubectl logs -f my-pod-name my-container-name
		=> view log stream of my-container-name from the pod (in case pod has multi-containers inside)

- exec:
	kubectl exec my-pod-name -- <command>
	ex:
		kubectl exec my-pod-name -- cat docs.txt


basic commands:
	kubectl run nginx --image=nginx --labels="tier=web"
	kubectl run nginx --image=nginx --labels="tier=web" --port=8080
		=> Create a new pod with name, image, labels and expose it on container port 8080.
	kubectl create -f my-pod.yml


	kubectl get all
	kubectl get pods
	kubectl get pods -o wide
		=> Output with wide (additional details)
	kubectl get pods --selector type=mypod-type
		=> Get pods with label "type:mypod-type"




	kubectl delete pod myapp-pod
	kubectl describe pod myapp-pod         

	
	kubectl get pod <pod-name> -o yaml > pod-definition.yaml
		=> extract pod to file

	kubectl run nginx --image=nginx --dry-run=client -o yaml
		=> create yml file but dont create/run pod (--dry-run=client)

	kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx-pod.yaml
		=> create yml file but dont create/run pod (--dry-run=client) and export to a file

	
	kubectl edit pod <pod-name>
		=> modify the properties of the pod
		NOTE: only the properties listed below are editable
			- spec.containers[*].image
			- spec.initContainers[*].image
			- spec.activeDeadlineSeconds
			- spec.tolerations
			- spec.terminationGracePeriodSeconds

	
	kubectl replace --force -f my-pod.yml
		=> delete old pod, replace with the new one


	kubectl exec <pod-name> -- <command>
	=> exec a command on container inside pod
		kubectl exec ubuntu-pod -- whoami










