1. 

kubectl run nginx-448839 --image=nginx:alpine
kubectl get pods
kubectl describe pod nginx-448839

2.
kubectl create namespace apx-z993845
kubectl get namespace

3. 
kubectl create deployment httpd-frontend --image=httpd:2.4-alpine --replicas=3
kubectl get deployments


4.
kubectl run messaging --image=redis:alpine --labels="tier=msg"
kubectl get pods
kubectl describe pod messaging

5.
kubectl get rs
kubectl describe rs rs-d33393
kubectl describe pod rs-d33393-lf85v
kubectl get rs rs-d33393 -o yaml > rs-d33393.yaml

nano rs-d33393.yaml
kubectl delete rs rs-d33393
kubectl create -f rs-d33393.yaml


6. 
kubectl get deployments -n marketing
kubectl describe deployments redis -n marketing
kubectl get pods -n marketing

kubectl expose pod redis-798b49c867-5tsvz -n marketing --port=6379 --name messaging-service --dry-run=client -o yaml > messaging-service.yml
nano messaging-service.yml

kubectl create -f messaging-service.yml
kubectl get svc -n marketing


7. 
kubectl get pods
kubectl get pod webapp-color -o yaml > webapp-color.yaml
nano webapp-color.yaml

kubectl delete pod webapp-color
kubectl create -f webapp-color.yaml
kubectl describe pod webapp-color


8. 
kubectl create configmap cm-3392845 --from-literal=DB_NAME=SQL3322 --from-literal=DB_HOST=sql322.mycompany.com --from-literal=DB_PORT=3306 
kubectl get configmap
kubectl describe configmap cm-3392845


9. 
kubectl create secret generic db-secret-xxdf --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123
kubectl get secret
kubectl describe secret db-secret-xxdf


10.
kubectl get pods
kubectl get pod app-sec-kff3345 -o yaml > app-sec-kff3345.yaml
nano app-sec-kff3345.yaml

kubectl replace --force -f app-sec-kff3345.yaml
kubectl create -f app-sec-kff3345.yaml

11.
kubectl get pods -A
kubectl get pods -n e-commerce

kubectl logs -f e-com-1123 -n e-commerce > /opt/outputs/e-com-1123.logs
cat /opt/outputs/e-com-1123.logs





12.
nano pv-analytics.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-analytics
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  hostPath:
  	path: /pv/data-analytics

kubectl create -f pv-analytics.yaml

kubectl get pv



13. 
kubectl create deployment redis --image=redis:alpine --replicas=1  --dry-run=client -o yaml > redis-deployment.yaml

nano redis-deployment.yaml

kubectl create -f redis-deployment.yaml

kubectl get deployment
kubectl get pods

labels:
    app: redis
  name: redis


kubectl expose pod redis-78d4b8b77c-x7gzp --port=6379 --name redis --dry-run=client -o yaml > redis-service.yml
nano redis-service.yml

kubectl create -f redis-service.yml
kubectl get svc


nano redis-access.yaml

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-access
spec:
  podSelector: 
    matchLabels:
      app: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              access: redis
      ports:
        - protocol: TCP
          port: 6379


kubectl create -f redis-access.yaml

kubectl get netpol


14.

kubectl run sega --image=busybox --dry-run=client -o yaml > sega.yml
nano sega.yml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: sega
spec:
  containers:
  - image: busybox
    name: tails
    command: ["sleep", "3600"]
  - image: nginx
    name: sonic
    env:
      - name: NGINX_PORT
        value: "8080"
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

kubectl get pods

kubectl create -f sega.yml


